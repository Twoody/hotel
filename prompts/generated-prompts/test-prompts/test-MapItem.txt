Source File:
```
A detailed description of something to do in the area
<template>
	<div class="map-item-page-wrapper">
		<div v-if="hasContent">
			<h1>Map Item: {{ title }}</h1>
			<div class="contact-toolbar">
				<MyButton class="button-phone">
					<a
						class="linked"
						:href="phone"
					>
						<!-- TODO svg -->
						<span>Phone</span>
					</a>
				</MyButton>
				<MyButton class="button-directions">
					<a
						class="linked"
						:href="address"
					>
						<!-- TODO svg -->
						<span>Maps</span>
					</a>
				</MyButton>
				<MyButton class="button-email">
					<a
						class="linked"
						:href="email"
					>
						<!-- TODO svg -->
						<span>Email</span>
					</a>
				</MyButton>
			</div>
			<div class="description">
				<p>
					Work in Progress... Check back later
				</p>
			</div>
		</div>
		<div v-else>
			<h1>Map Item Not Found</h1>
			<p>
				Oops, looks like the url is off
			</p>
		</div>
	</div>
</template>

<script>
import { LOCAL_ACTIVITIES } from "constants/localActivities.js"

export default {
	name: "MapItem",
	props: {},
	data: function()
	{
		return {
			activites: LOCAL_ACTIVITIES,
		}
	},

	computed: {
		/**
		 * Retrieves the activity data for the given ID from the route parameters.
		 *
		 * @returns {object} The activity data object or an empty object if not found.
		 */
		activity ()
		{
			return this.activites[this.$route.params.id] || {}
		},

		/**
		 * Retrieves the address for the activity.
		 *
		 * @returns {string} The address of the activity, or an empty string if not available.
		 */
		address ()
		{
			return this.activity.address || ""
		},

		/**
		 * Retrieves the email address for the activity.
		 *
		 * @returns {string} The email address of the activity, or an empty string if not available.
		 */
		email ()
		{
			return this.activity.email || ""
		},

		/**
		 * Checks whether the activity has content (e.g., a title).
		 *
		 * @returns {boolean} True if the activity has a title; false otherwise.
		 */
		hasContent ()
		{
			return !!this.activity.title
		},

		/**
		 * Retrieves the external link for the activity.
		 *
		 * @returns {string} The external link (href) of the activity, or an empty string if not available.
		 */
		href ()
		{
			return this.activity.href || ""
		},

		/**
		 * Retrieves the phone number for the activity.
		 *
		 * @returns {string} The phone number of the activity, or an empty string if not available.
		 */
		phone ()
		{
			return this.activity.phone || ""
		},

		/**
		 * Retrieves the title of the activity.
		 *
		 * @returns {string} The title of the activity, or an empty string if not available.
		 */
		title ()
		{
			return this.activity.title || ""
		},
	},
	methods: {},
}
</script>

<style scoped lang="less">
@import "../../assets/styles/styles";

.map-item-page-wrapper {
	background-color: @color-purple !important;
	border-radius: 7px;
	height: auto;
	margin-top: 7px;
	width: 100%;
	max-width: min(98%, 660px);

	h1 {
		border-bottom: 1px solid @myblack;
	}

	p {
		font-size: 25px;
	}

	.contact-toolbar {
		align-items: center;
		display: flex;
		justify-content: center;
		flex-grow: 0;
		width: auto;

		.my-button-wrapper {
			margin-left: 10px;
			margin-right: 10px;
			max-width: 200px;
			min-width: 100px;
			width: auto;
		}
	}
}
</style>

```

package.json:
```
{
  "name": "hotel",
  "version": "2.2.4",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint --ext .js,.vue --ignore-path .gitignore --fix src",
    "test": "vitest",
    "test:coverage": "npm run test -- --coverage"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.1.1",
    "@fortawesome/free-brands-svg-icons": "^6.1.1",
    "@fortawesome/free-solid-svg-icons": "^6.1.1",
    "@fortawesome/vue-fontawesome": "^3.0.1",
    "less": "^4.1.3",
    "less-loader": "^7.2.1",
    "luxon": "^2.4.0",
    "teahub": "^0.1.0-prerelease11",
    "vue": "^3.2.25",
    "vue-router": "^4.0.13",
    "vuex": "^4.0.2"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^2.3.3",
    "@vue/test-utils": "^2.4.0-alpha.2",
    "eslint": "^8.19.0",
    "eslint-plugin-jsdoc": "^39.3.3",
    "eslint-plugin-vue": "^9.1.1",
    "firebase": "^11.1.0",
    "jsdom": "^25.0.1",
    "less": "^4.1.0",
    "less-loader": "^7.2.1",
    "vite": "^2.9.9",
    "vitest": "^2.1.2"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended",
      "@vue/standard"
    ],
    "rules": {},
    "overrides": [
      {
        "files": [
          "**/__tests__/*.{j,t}s?(x)",
          "**/tests/unit/**/*.spec.{j,t}s?(x)"
        ],
        "env": {
          "jest": true
        }
      }
    ]
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
```

vitest.config.js:
```
import {resolve} from "path"
import { defineConfig } from "vitest/config"
import Vue from "@vitejs/plugin-vue"

export default defineConfig({
  plugins: [
    Vue(),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, ".", "src"),
      components: resolve(__dirname, "src/components/"),
      constants: resolve(__dirname, "src/constants/"),
      find: /^~/,
      img: resolve(__dirname, "assets/img"),
      mocks: resolve(__dirname, ".", "tests/__mocks__/"),
      services: resolve(__dirname, "src/services/"),
      src: resolve(__dirname, "src"),
      store: resolve(__dirname, "src/store/"),
      styles: resolve(__dirname, "src/assets/styles/"),
      svgs: resolve(__dirname, "src/assets/svgs/"),
    },
  },

  root: ".", // Define the root
  test: {
    globals: true,
    environment: "jsdom",
    // The file extension of your test files
    include: [
      "tests/**/*.{test,spec}.{js,jsx,ts,tsx}",
    ],
  },
})
```

Assignment
Your assignment is to write adequate unit tests for `Source File`. If there are any inherit bugs or issues, report the issues with the code with your response.
