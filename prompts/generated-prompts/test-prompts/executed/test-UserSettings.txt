Source File:
```
<template>
	<div class="setting-page-wrapper">
		<h1>Settings</h1>

		<!-- 1) If Firebase Auth is still initializing -->
		<div v-if="!isAuthReady">
			<Spinner size="x-large" />
		</div>

		<!-- 2) If auth is ready, but user is not logged in -->
		<div v-else-if="isAuthReady && !isLoggedIn">
			Currently not logged in; Please visit
			<router-link
				class="nav-item"
				to="/login"
			>
				the login page
			</router-link>.
		</div>

		<!-- 3) If auth is ready, user is logged in -->
		<div v-else-if="isAuthReady && isLoggedIn">
			<div class="settings-tabs-wrapper">
				<Filters
					:filters="settingTabs"
					@update="handleTabNavigation"
				/>
			</div>

			<!-- Instead of large v-if blocks, load subcomponents conditionally -->
			<AccountSettings
				v-if="activeTab && activeTab.id === 0"
			/>

			<ProfileSettings
				v-else-if="activeTab && activeTab.id === 1"
			/>

			<PrivacyAndSecuritySettings
				v-else-if="activeTab && activeTab.id === 2"
			/>

			<div v-else>
				<!-- TODO: Red warning/danger design -->
				<p>
					Please pick a section from the tabs above.
				</p>
			</div>
		</div>
	</div>
</template>

<script>
import { logEvent } from "firebase/analytics"
import { firebaseAnalyics } from "@/firebase"
import store from "@/store/store.js"

// Import your new sub-components
import AccountSettings from "@/views/settings/AccountSettings.vue"
import PrivacyAndSecuritySettings from "@/views/settings/PrivacyAndSecuritySettings.vue"
import ProfileSettings from "@/views/settings/ProfileSettings.vue"

export default {
	name: "UserSettings",

	data ()
	{
		return {
			activeTab: null,
			availableTabs: {
				0: {
					active: false,
					id: 0,
					title: "Account",
				},
				1: {
					active: false,
					id: 1,
					title: "Profile",
				},
				2: {
					active: false,
					id: 2,
					title: "Privacy + Security",
				},
			},
		}
	},

	computed: {
		/**
		 * Checks whether the authentication state has finished checking.
		 *
		 * @returns {boolean} True if auth state is ready, false otherwise.
		 */
		isAuthReady ()
		{
			return store.state.user.isAuthReady
		},

		/**
		 * Checks whether the user is logged in.
		 *
		 * @returns {boolean} True if the user is logged in, false otherwise.
		 */
		isLoggedIn ()
		{
			return store.state.user.isLoggedIn
		},

		/**
		 * Returns the list of tabs the user can visit to view/edit account information.
		 *
		 * @returns {Array} List of tab objects.
		 */
		settingTabs ()
		{
			// Adapt for the <Filters> component
			return Object.values(this.availableTabs)
		},
	},

	created ()
	{
		const queryTab = this.getFromQueryString("active-tab")
		if (queryTab !== null)
		{
			const tabId = parseInt(queryTab, 10)
			if (this.availableTabs[tabId])
			{
				this.activeTab = this.availableTabs[tabId]
				this.availableTabs[tabId].active = true
			}
			else
			{
				this.activeTab = this.availableTabs[0]
				this.availableTabs[0].active = true
			}
		}
		else
		{
			this.activeTab = this.availableTabs[0]
			this.availableTabs[0].active = true
		}
	},

	methods: {
		/**
		 * Retrieves a value from the query string by key.
		 *
		 * @param {string} key - The key to look for in the query string.
		 * @returns {string|null|boolean} The value of the key, null if the key is not present, or true if the key has no value.
		 */
		getFromQueryString (key)
		{
			const urlParams = new URLSearchParams(window.location.search)
			if (!urlParams.has(key))
			{
				return null
			}
			const val = urlParams.get(key)
			return val || true
		},

		/**
		 * Handles navigation when the user clicks a tab in the Filters component.
		 *
		 * @param {number} id - The ID of the tab selected.
		 * @returns {void}
		 * @since 2.3.0
		 */
		handleTabNavigation (id)
		{
			// Deactivate all, then activate the chosen one
			Object.keys(this.availableTabs).forEach((tabId) =>
			{
				this.availableTabs[tabId].active = false
			})
			if (this.availableTabs[id])
			{
				this.availableTabs[id].active = true
				this.activeTab = this.availableTabs[id]
			}

			this.$router.replace({
				query: {
					...this.$route.query,
					"active-tab": id,
				},
			})

			// Optionally log to analytics
			try
			{
				logEvent(firebaseAnalyics, "settings_tab_navigation", {
					value: this.availableTabs[id]?.title || "NOT_FOUND",
				})
			}
			catch (e)
			{
				console.error(e)
			}
		},
	},
	components: {
		AccountSettings,
		PrivacyAndSecuritySettings,
		ProfileSettings,
	},
}
</script>

<style scoped lang="less">
@import "../../../assets/styles/styles";

.setting-page-wrapper {
	background-color: @color-purple !important;
	border-radius: 7px;
	height: auto;
	margin: 7px;
	max-width: min(98%, 660px);
	padding: 9px;
	width: 100%;

	.settings-tabs-wrapper {
		.filters-wrapper {
			padding-left:20px;
			padding-right:20px;
			margin: 0;
			justify-content: center;
		}

		border-bottom: 2px solid black;
		margin-bottom: 10px;

		:deep(.my-button-wrapper) {
			&.active {
				background: @color-lavendar;
			}
		}
	}
	.submit-button {
		max-width: 50%;
	}
	.top-padding {
		margin-top: 30px;
	}

	h1 {
		border-bottom: 1px solid @myblack;
		margin-bottom: 5px;
	}
	p {
		font-size: 25px;
	}
}
</style>
```

package.json:
```
{
  "name": "hotel",
  "version": "2.2.4",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint --ext .js,.vue --ignore-path .gitignore --fix src",
    "test": "vitest",
    "test:coverage": "npm run test -- --coverage"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.1.1",
    "@fortawesome/free-brands-svg-icons": "^6.1.1",
    "@fortawesome/free-solid-svg-icons": "^6.1.1",
    "@fortawesome/vue-fontawesome": "^3.0.1",
    "less": "^4.1.3",
    "less-loader": "^7.2.1",
    "luxon": "^2.4.0",
    "teahub": "^0.1.0-prerelease11",
    "vue": "^3.2.25",
    "vue-router": "^4.0.13",
    "vuex": "^4.0.2"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^2.3.3",
    "@vue/test-utils": "^2.4.0-alpha.2",
    "eslint": "^8.19.0",
    "eslint-plugin-jsdoc": "^39.3.3",
    "eslint-plugin-vue": "^9.1.1",
    "firebase": "^11.1.0",
    "jsdom": "^25.0.1",
    "less": "^4.1.0",
    "less-loader": "^7.2.1",
    "vite": "^2.9.9",
    "vitest": "^2.1.2"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended",
      "@vue/standard"
    ],
    "rules": {},
    "overrides": [
      {
        "files": [
          "**/__tests__/*.{j,t}s?(x)",
          "**/tests/unit/**/*.spec.{j,t}s?(x)"
        ],
        "env": {
          "jest": true
        }
      }
    ]
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
```

vitest.config.js:
```
import {resolve} from "path"
import { defineConfig } from "vitest/config"
import Vue from "@vitejs/plugin-vue"

export default defineConfig({
  plugins: [
    Vue(),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, ".", "src"),
      components: resolve(__dirname, "src/components/"),
      constants: resolve(__dirname, "src/constants/"),
      find: /^~/,
      img: resolve(__dirname, "assets/img"),
      mocks: resolve(__dirname, ".", "tests/__mocks__/"),
      services: resolve(__dirname, "src/services/"),
      src: resolve(__dirname, "src"),
      store: resolve(__dirname, "src/store/"),
      styles: resolve(__dirname, "src/assets/styles/"),
      svgs: resolve(__dirname, "src/assets/svgs/"),
    },
  },

  root: ".", // Define the root
  test: {
    globals: true,
    environment: "jsdom",
    // The file extension of your test files
    include: [
      "tests/**/*.{test,spec}.{js,jsx,ts,tsx}",
    ],
  },
})
```

Assignment:
Your assignment is to write adequate unit tests for an app and for `Source File`. 
The app is using vite, vitest, and vue3.
The is app using a front end library (teahub), a vuex store, and the vue router.
Your job is to increase the test coverage of the code in `Source File` with tests written in vitest.
Ensure to use the vitest `mount` instead of `render`.
Ensure a helper function is created at the start of the file to create the `wrapper` using `mount`.
If there are any inherit bugs or issues, report the issues with the code with your response.

