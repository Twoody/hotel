Source File:
```
<template>
	<div class="home-wrapper">
		<div class="booking-section">
			<h2>
				Book with Us
			</h2>
			<AvailabilitySearch
				hideDateBar
				:isProcessing="isProcessing"
				:isLoading="!isAuthReady"
				@booking-request="processBookingRequest"
			/>
		</div>
		<div class="accordion-sections">
			<h2>
				Most Asked Questions
			</h2>
			<div class="flex-box">
				<CheckInAndOutAccordion class="flex-item" />
				<WifiAccordion class="flex-item" />
				<TrashAccordion class="flex-item" />
				<ParkingAccordion class="flex-item" />
				<AccessibilityAccordion class="flex-item" />
				<GuestSafetyAccordion class="flex-item" />
			</div>
		</div>
	</div>
</template>

<script>
import { collection, doc, setDoc, serverTimestamp } from "firebase/firestore"
import store from "@/store/store.js"
import { db } from "@/firebase" // <-- import your firebase db instance

import AccessibilityAccordion from "@/components/accordions/questions/AccessibilityAccordion"
import CheckInAndOutAccordion from "@/components/accordions/questions/CheckInAndOutAccordion"
import GuestSafetyAccordion from "@/components/accordions/questions/GuestSafetyAccordion"
import ParkingAccordion from "@/components/accordions/questions/ParkingAccordion"
import TrashAccordion from "@/components/accordions/questions/TrashAccordion"
import WifiAccordion from "@/components/accordions/questions/WifiAccordion"

export default {
	name: "Home",
	components: {
		AccessibilityAccordion,
		CheckInAndOutAccordion,
		GuestSafetyAccordion,
		ParkingAccordion,
		TrashAccordion,
		WifiAccordion,
	},
	data ()
	{
		return {
			isProcessing: false, // Make sure this is here!
		}
	},

	methods: {
		/**
		 * @returns {void} Get
		 * @since 2.3.0
		 */
		getBookedDays ()
		{
			// TODO: Store dates in firestore
			//			 Get disabled dates from firestore
			//			 Utilize `disableDays` via Vue Cal (e.g. 2020-09-18)
		},

		/**
		 * Handles the booking request by creating a booking document in Firestore.
		 * Redirects the user to the manage booking page upon success.
		 *
		 * @param {object} bookingData - The data related to the booking.
		 * @param {string} [bookingData.startDate] - The start date of the booking.
		 * @param {string} [bookingData.endDate] - The end date of the booking.
		 * @returns {Promise<void>} Resolves when the booking request is processed.
		 * @since 2.3.0
		 */
		async processBookingRequest (bookingData = {})
		{
			// Do not allow multiple processes on the same selection
			if (this.isProcessing)
			{
				return
			}

			// Handle state management
			this.isProcessing = true

			try
			{
				// Create a new document in the bookings collection
				const timestamp = serverTimestamp()
				const bookingsRef = await collection(db, "bookings")
				const newBookingRef = doc(bookingsRef)
				await setDoc(newBookingRef, {
					bookedAt: null,
					countChildren: null,
					countGuests: null,
					countPets: null,
					createdAt: timestamp,
					endDate: bookingData.endDate || null,
					guestID: this.currentUser.uid,
					hostID: 1,
					startDate: bookingData.startDate || null,
					updatedAt: timestamp,
				})

				this.$router.push({
					name: "manageBooking",
					params: {
						id: newBookingRef.id,
					},
				})
			}
			catch (err)
			{
				console.error("Error creating booking document: ", err)
			}
			finally
			{
				this.isProcessing = false
			}
		},
	},
	computed: {
		currentUser ()
		{
			return store.state.user.user
		},

		/**
		 * @returns {boolean} - Whether auth state has finished checking
		 */
		isAuthReady ()
		{
			return store.state.user.isAuthReady
		},
	},
}
</script>

<style lang="less">
@import "../../assets/styles/styles";
.home-wrapper {
	display: flex;
	flex-direction: column;
	padding-top: 34px;
	width: 100%;

	h2 {
		font-size: clamp(25px, 3vw, 35px);
		margin-bottom: 0px;
		margin-top: 0px;
	}

	.booking-section {
		background: @color-lavendar;
	}
	.accordion-sections {
		align-items: center;
		align-content: center;
		background: @color-purple;
		display: flex;
		flex-direction: column;
		flex-grow: 1;
		justify-content: center;
		padding-bottom: 50px;
		padding-top: 20px;
		width: 100%;

		.flex-box {
			align-items: center;
			align-content: center;
			display: flex;
			flex-direction: column;
			justify-content: center;
			max-width: min(98%, 660px);
			padding-top: 20px;

			.flex-item {
				flex-grow: 1;
				width: 100%;

			}
			.accordion-wrapper {
				margin: 7px;
			}
			.question-accordion-wrapper {
				max-width: 100%;
			}
		}
	}

}
</style>
```

package.json:
```
{
  "name": "hotel",
  "version": "2.2.4",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint --ext .js,.vue --ignore-path .gitignore --fix src",
    "test": "vitest",
    "test:coverage": "npm run test -- --coverage"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.1.1",
    "@fortawesome/free-brands-svg-icons": "^6.1.1",
    "@fortawesome/free-solid-svg-icons": "^6.1.1",
    "@fortawesome/vue-fontawesome": "^3.0.1",
    "less": "^4.1.3",
    "less-loader": "^7.2.1",
    "luxon": "^2.4.0",
    "teahub": "^0.1.0-prerelease11",
    "vue": "^3.2.25",
    "vue-router": "^4.0.13",
    "vuex": "^4.0.2"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^2.3.3",
    "@vue/test-utils": "^2.4.0-alpha.2",
    "eslint": "^8.19.0",
    "eslint-plugin-jsdoc": "^39.3.3",
    "eslint-plugin-vue": "^9.1.1",
    "firebase": "^11.1.0",
    "jsdom": "^25.0.1",
    "less": "^4.1.0",
    "less-loader": "^7.2.1",
    "vite": "^2.9.9",
    "vitest": "^2.1.2"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended",
      "@vue/standard"
    ],
    "rules": {},
    "overrides": [
      {
        "files": [
          "**/__tests__/*.{j,t}s?(x)",
          "**/tests/unit/**/*.spec.{j,t}s?(x)"
        ],
        "env": {
          "jest": true
        }
      }
    ]
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
```

vitest.config.js:
```
import {resolve} from "path"
import { defineConfig } from "vitest/config"
import Vue from "@vitejs/plugin-vue"

export default defineConfig({
  plugins: [
    Vue(),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, ".", "src"),
      components: resolve(__dirname, "src/components/"),
      constants: resolve(__dirname, "src/constants/"),
      find: /^~/,
      img: resolve(__dirname, "assets/img"),
      mocks: resolve(__dirname, ".", "tests/__mocks__/"),
      services: resolve(__dirname, "src/services/"),
      src: resolve(__dirname, "src"),
      store: resolve(__dirname, "src/store/"),
      styles: resolve(__dirname, "src/assets/styles/"),
      svgs: resolve(__dirname, "src/assets/svgs/"),
    },
  },

  root: ".", // Define the root
  test: {
    globals: true,
    environment: "jsdom",
    // The file extension of your test files
    include: [
      "tests/**/*.{test,spec}.{js,jsx,ts,tsx}",
    ],
  },
})
```

Assignment
Your assignment is to write adequate unit tests for an app and for `Source File`. 
The app is using vite, vitest, and vue3.
The is app using a front end library (teahub), a vuex store, and the vue router.
Your job is to increase the test coverage of the code in `Source File` with tests written in vitest.
Ensure to use the vitest `mount` instead of `render`.
Ensure a helper function is created at the start of the file to create the `wrapper` using `mount`.
If there are any inherit bugs or issues, report the issues with the code with your response.