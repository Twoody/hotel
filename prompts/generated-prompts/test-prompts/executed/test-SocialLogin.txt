Source File:
```
<template>
	<div class="social-login-wrapper">
		<div class="social-button-dex">
			{{ providerName }}
		</div>
		<MyButton
			class="social-button"
			:disabled="isLoggingIn || !isAuthReady || isLoggedIn"
			@click="handleLogin"
		>
			<font-awesome-icon
				:icon="icon"
				class="svg-wrapper"
				:style="{ color: 'blue' }"
				:alt="`${providerName} Logo`"
			/>
		</MyButton>
	</div>
</template>

<script>
import {signInWithPopup,
	GoogleAuthProvider,
	FacebookAuthProvider} from "firebase/auth"
import { firebaseAuth } from "@/firebase"
import { addUserToFirestore } from "@/utils"
import store from "@/store/store.js"

/**
 * @param {string} word - A word that needs the first letter capitalized
 * @returns {string} - The parameter, but apitalize the first letter
 */
function capitalize (word)
{
	return word.charAt(0).toUpperCase() + word.slice(1)
}

export default {
	name: "SocialLogin",
	props: {
		/**
		 * Which login provider to use, e.g. 'google' or 'facebook'
		 *
		 * @warning facebook authentiacation is currently blocked until a Buiness Number is sent in
		 */
		provider: {
			required: true,
			type: String,
			validator (val) 
			{
				return [
					"google",
					"facebook",
				].includes(val.toLowerCase())
			},
		},
	},
	computed: {
		/**
		 * Choose appropriate FontAwesome icon
		 *
		 * @returns {Array} - Font Awesome array-to-string specfic
		 * @since 2.2.2
		 */
		icon () 
		{
			if (this.provider === "facebook") 
			{
				return [
					"fab",
					"facebook",
				]
			}
			return [
				"fab",
				"google",
			]
		},

		/**
		 * Uses the store to check if the auth is ready
		 *
		 * @returns {boolean} - Whether a user is logged in or not
		 * @since 2.2.1
		 */
		isAuthReady () 
		{
			return store.state.user.isAuthReady
		},

		/**
		 * Uses the store to check if the user is logged in
		 *
		 * @returns {boolean} - Whether a user is logged in or not
		 * @since 2.2.1
		 */
		isLoggedIn () 
		{
			return store.state.user.isLoggedIn
		},

		/**
		 * Uses the store to check if the user is in the process of logging in
		 *
		 * @returns {boolean} - Whether a user is logging in or not
		 * @since 2.2.1
		 */
		isLoggingIn () 
		{
			return store.state.user.isLoggingIn
		},

		/**
		 * A simplistic approach to detect mobile for Google redirect
		 *
		 * @returns {boolean} - Is current device mobile
		 * @todo Create and move to the store + App.vue level
		 * @todo Possible consider https://github.com/kaimallea/isMobile
		 * @since 2.2.1
		 */
		isMobile () 
		{
			let isMobile = false
			if (/Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini|Mobi/i.test(
				navigator.userAgent))
			{
				isMobile = true
			}
			return isMobile
		},

		/**
		 * @returns {string} - Capitalized version of provider name for display
		 */
		providerName () 
		{
			return capitalize(this.provider)
		},

	},
	methods: {
		/**
		 * @returns {object} - A configured provider instance (Google or Facebook)
		 * @since 2.2.2
		 */
		getProviderInstance () 
		{
			if (this.provider === "google") 
			{
				const googleProvider = new GoogleAuthProvider()
				googleProvider.addScope("profile")
				googleProvider.addScope("email")
				return googleProvider
			}
			else if (this.provider === "facebook") 
			{
				const facebookProvider = new FacebookAuthProvider()
				facebookProvider.addScope("user_birthday")
				facebookProvider.setCustomParameters({
					display: "popup", 
				})
				return facebookProvider
			}
			else
			{
				return {
					invalid: true,
				}
			}
		},

		async handleLogin () 
		{
			let success = false

			// If we are currently logging in or already logged in, do nothing
			if (this.isLoggingIn && this.isAuthReady && !this.isLoggedIn) 
			{
				return success
			}

			// Start login process - set a mutex
			this.$store.commit("setIsLoggingIn", true)

			try 
			{
				let response

				const providerInstance = this.getProviderInstance()
				if (providerInstance.invalid) 
				{
					return success
				}

				response = await signInWithPopup(firebaseAuth, providerInstance)

				const user = response?.user
				if (user) 
				{
					// Add user to Firestore if necessary
					const firestoreUser = await addUserToFirestore(user)
					// Tell Vuex to fetch/store the user
					this.$store.dispatch("fetchUser", firestoreUser.data())
					// Redirect or route as appropriate
					this.$router.push({
						path: "/", 
					})
					success = true
				}
			}
			catch (error) 
			{
				console.error(error.message)
			}
			finally 
			{
				// Release the mutex
				this.$store.commit("setIsLoggingIn", false)
			}
			return success
		},
	},
}
</script>

<style scoped>
.social-login-wrapper {
	align-items: center;
	display: flex;
	flex-direction: column;
}
.social-button-dex {
	margin-right: 8px;
}
</style>
```

package.json:
```
{
  "name": "hotel",
  "version": "2.2.4",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint --ext .js,.vue --ignore-path .gitignore --fix src",
    "test": "vitest",
    "test:coverage": "npm run test -- --coverage"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.1.1",
    "@fortawesome/free-brands-svg-icons": "^6.1.1",
    "@fortawesome/free-solid-svg-icons": "^6.1.1",
    "@fortawesome/vue-fontawesome": "^3.0.1",
    "less": "^4.1.3",
    "less-loader": "^7.2.1",
    "luxon": "^2.4.0",
    "teahub": "^0.1.0-prerelease11",
    "vue": "^3.2.25",
    "vue-router": "^4.0.13",
    "vuex": "^4.0.2"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^2.3.3",
    "@vue/test-utils": "^2.4.0-alpha.2",
    "eslint": "^8.19.0",
    "eslint-plugin-jsdoc": "^39.3.3",
    "eslint-plugin-vue": "^9.1.1",
    "firebase": "^11.1.0",
    "jsdom": "^25.0.1",
    "less": "^4.1.0",
    "less-loader": "^7.2.1",
    "vite": "^2.9.9",
    "vitest": "^2.1.2"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended",
      "@vue/standard"
    ],
    "rules": {},
    "overrides": [
      {
        "files": [
          "**/__tests__/*.{j,t}s?(x)",
          "**/tests/unit/**/*.spec.{j,t}s?(x)"
        ],
        "env": {
          "jest": true
        }
      }
    ]
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
```

vitest.config.js:
```
import {resolve} from "path"
import { defineConfig } from "vitest/config"
import Vue from "@vitejs/plugin-vue"

export default defineConfig({
  plugins: [
    Vue(),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, ".", "src"),
      components: resolve(__dirname, "src/components/"),
      constants: resolve(__dirname, "src/constants/"),
      find: /^~/,
      img: resolve(__dirname, "assets/img"),
      mocks: resolve(__dirname, ".", "tests/__mocks__/"),
      services: resolve(__dirname, "src/services/"),
      src: resolve(__dirname, "src"),
      store: resolve(__dirname, "src/store/"),
      styles: resolve(__dirname, "src/assets/styles/"),
      svgs: resolve(__dirname, "src/assets/svgs/"),
    },
  },

  root: ".", // Define the root
  test: {
    globals: true,
    environment: "jsdom",
    // The file extension of your test files
    include: [
      "tests/**/*.{test,spec}.{js,jsx,ts,tsx}",
    ],
  },
})
```

Assignment:
Your assignment is to write adequate unit tests for an app and for `Source File`. 
The app is using vite, vitest, and vue3.
The is app using a front end library (teahub), a vuex store, and the vue router.
Your job is to increase the test coverage of the code in `Source File` with tests written in vitest.
Ensure to use the vitest `mount` instead of `render`.
Ensure a helper function is created at the start of the file to create the `wrapper` using `mount`.
If there are any inherit bugs or issues, report the issues with the code with your response.

