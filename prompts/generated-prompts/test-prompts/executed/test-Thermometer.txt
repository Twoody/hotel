Source File:
```
<template>
	<div class="thermometer flex-box">
		<div>
			<div class="tube">
				<!-- Main ten percent notches -->
				<div
					class="notches flex-box"
					v-for="n in 9"
					:key="n"
				>
					<div
						class="notch"
						:style="{ bottom: (n * 10) + '%' }"
					/>
					<span
						class="notch-label"
						:style="{ bottom: ((n * 10) - 2) + '%', left: '58px' }"
					>
						{{n * 10}}
					</span>
				</div>

				<!-- Secondary 5 percent notches -->
				<div
					v-for="n in 19"
					:key="n"
				>
					<div
						v-if="n % 2 !== 0"
						class="notches flex-box"
					>
						<div
							class="notch small-notch"
							:style="{ bottom: (n * 5) + '%', right:'40px' }"
						/>
						<span
							class="notch-label"
							:style="{ bottom: ((n * 5) - 2) + '%', right: '58px' }"
						>
							{{n * 5}}
						</span>
					</div>
				</div>

				<div
					class="mercury"
					:style="{ height: currentPercent + '%' }"
				/>
			</div>
		</div>
		<span v-text="currentPercent + '%'" />
	</div>
</template>

<script>
export default {
	name: "Thermometer",
	props:
	{
		currentAmount:
		{
			default: 0,
			required: false,
			type: Number,
		},
		maxAmount:
		{
			default: 0,
			required: false,
			type: Number,
		},
	},
	computed:
	{
		/** @returns {number} The current percent of total debt paid off */
		currentPercent ()
		{
			if (!this.currentAmount || !this.maxAmount)
			{
				return 0
			}
			if (this.currentAmount > this.maxAmount)
			{
				return 100
			}
			const percent = this.currentAmount/this.maxAmount*100
			return percent.toFixed(2)
		},
	},
}
</script>

<style>
.thermometer {
  /* Style for thermometer container */
	width: 100px; /* Adjusted to give space for notches */
	display: flex;
	justify-content: center;

	.tube {
		/* Style for the tube of the thermometer */
		background-color: #eee;
		border: 1px black solid;
		border-radius: 110px;
		height: 600px;
		position: relative;
		width: 50px;
	}

	.mercury {
		/* Style for the mercury inside the thermometer */
		background-color: red; /* Mercury color */
		border-bottom-right-radius: 30px;
		border-bottom-left-radius: 30px;
		bottom: 0;
		position: absolute;
		width: 100%;
		z-index: 1;
	}

	.notches {
		.notch {
			/* Style for the notches */
			border-top: 1px solid black; /* Example notch style */
			position: absolute;
			width: 100%;
			z-index: 2;
			&.small-notch {
				width: 20%;
			}
		}
		.notch-label {
			z-index: 2;
			position: absolute;
		}
	}

}
</style>
```

package.json:
```
{
  "name": "hotel",
  "version": "2.2.4",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint --ext .js,.vue --ignore-path .gitignore --fix src",
    "test": "vitest",
    "test:coverage": "npm run test -- --coverage"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.1.1",
    "@fortawesome/free-brands-svg-icons": "^6.1.1",
    "@fortawesome/free-solid-svg-icons": "^6.1.1",
    "@fortawesome/vue-fontawesome": "^3.0.1",
    "less": "^4.1.3",
    "less-loader": "^7.2.1",
    "luxon": "^2.4.0",
    "teahub": "^0.1.0-prerelease11",
    "vue": "^3.2.25",
    "vue-router": "^4.0.13",
    "vuex": "^4.0.2"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^2.3.3",
    "@vue/test-utils": "^2.4.0-alpha.2",
    "eslint": "^8.19.0",
    "eslint-plugin-jsdoc": "^39.3.3",
    "eslint-plugin-vue": "^9.1.1",
    "firebase": "^11.1.0",
    "jsdom": "^25.0.1",
    "less": "^4.1.0",
    "less-loader": "^7.2.1",
    "vite": "^2.9.9",
    "vitest": "^2.1.2"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended",
      "@vue/standard"
    ],
    "rules": {},
    "overrides": [
      {
        "files": [
          "**/__tests__/*.{j,t}s?(x)",
          "**/tests/unit/**/*.spec.{j,t}s?(x)"
        ],
        "env": {
          "jest": true
        }
      }
    ]
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
```

vitest.config.js:
```
import {resolve} from "path"
import { defineConfig } from "vitest/config"
import Vue from "@vitejs/plugin-vue"

export default defineConfig({
  plugins: [
    Vue(),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, ".", "src"),
      components: resolve(__dirname, "src/components/"),
      constants: resolve(__dirname, "src/constants/"),
      find: /^~/,
      img: resolve(__dirname, "assets/img"),
      mocks: resolve(__dirname, ".", "tests/__mocks__/"),
      services: resolve(__dirname, "src/services/"),
      src: resolve(__dirname, "src"),
      store: resolve(__dirname, "src/store/"),
      styles: resolve(__dirname, "src/assets/styles/"),
      svgs: resolve(__dirname, "src/assets/svgs/"),
    },
  },

  root: ".", // Define the root
  test: {
    globals: true,
    environment: "jsdom",
    // The file extension of your test files
    include: [
      "tests/**/*.{test,spec}.{js,jsx,ts,tsx}",
    ],
  },
})
```

Assignment
Your assignment is to write adequate unit tests for `Source File`. If there are any inherit bugs or issues, report the issues with the code with your response.
