Source File:
```
A filterable list of things to do
<template>
	<div class="maps-page-wrapper">
		<h1 class="main-title">
			Maps
		</h1>
		<MapFilters
			@updated-active="updateFilters($event)"
		/>
		<div class="maps-content">
			<MapCard
				v-for="(activity, index) in shownActivies"
				:key="index"
				:activity="activity"
				:imageURL="activity.thumbnail || 'assets/imgs/cat-with-hammer.png'"
				:isOnline="isOnline"
				:shown="activity.shown"
				@click="gotoItem(activity.id)"
			/>
		</div>
	</div>
</template>

<script>
import { MAPS } from "constants/misc.js"
import { LOCAL_ACTIVITIES } from "constants/localActivities.js"
import MapFilters from "components/buttons/filters/MapFilters"

export default {
	name: "Maps",
	components: {
		MapFilters,
	},

	data: function()
	{
		return {
			MAPS: MAPS,
			activeFilters: [],
			activities: LOCAL_ACTIVITIES,
			isOnline: this.$store.state.isOnline,
		}
	},

	computed: {
		allActivities ()
		{
			let all = []
			let keys = Object.keys(this.activities)
			for (let i = 0; i < keys.length; i += 1)
			{
				let activity = this.activities[keys[i]]
				activity.shown = true
				all.push(activity)
			}

			// Sort alphabetically
			all.sort((a, b) => (a.title > b.title ? 1 : -1))
			return all
		},

		/**
		 * @returns {object[]} - List of cards to be shown after filters are applied; Defaults to all activities.
		 */
		shownActivies ()
		{
			/**
			 * Firestore url for cat w/ hammer:
			 *  https://firebasestorage.googleapis.com/v0/b/votel-f1c47.appspot.com/o/cat-with-hammer.png?alt=media&token=e717e395-6406-4a57-83ac-b8c838427d91
			 */
			let ret = []

			for (let index in this.allActivities)
			{
				let activity = this.allActivities[index]
				let filters = activity.tags

				// Reset local value
				activity.shown = true
				if (this.activeFilters && !filters.length)
				{
					activity.shown = false
				}
				else if (this.activeFilters.length && filters.length)
				{
					for (let j = 0; j < this.activeFilters.length; j += 1)
					{
						if (!filters.includes(this.activeFilters[j].id))
						{
							activity.shown = false
							break
						}
					}
				}
				else if (!this.activeFilters.length)
				{
					// If no filters are selected, show everything
					activity.shown = true
				}
				ret.push(activity)
			}

			return ret
		},
	},
	methods: {
		/**
		 * Redirects the user to the detail page of the selected activity.
		 *
		 * @param {number} id - ID of the Firestore-related activity.
		 * @returns {void}
		 * @since 2.3.0
		 */
		gotoItem (id)
		{
			this.$router.push({
				name: "mapItem",
				params: {
					id,
				},
			})
		},

		/**
		 * Updates the active filters for the map.
		 *
		 * @param {object[]} newFilters - New filters to replace the old ones.
		 * @returns {void}
		 */
		updateFilters (newFilters)
		{
			this.activeFilters = newFilters
		},
	},
}
</script>

<style scoped lang="less">
@import "../../assets/styles/styles";

.maps-page-wrapper {
	height: auto;
	padding: 10px;
	width: 100%;

	.maps-content {
		align-content: center;
		align-items: center;
		justify-content: center;
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		transition: all 0.2s ease;
	}
}
</style>
```

package.json:
```
{
  "name": "hotel",
  "version": "2.2.4",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint --ext .js,.vue --ignore-path .gitignore --fix src",
    "test": "vitest",
    "test:coverage": "npm run test -- --coverage"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.1.1",
    "@fortawesome/free-brands-svg-icons": "^6.1.1",
    "@fortawesome/free-solid-svg-icons": "^6.1.1",
    "@fortawesome/vue-fontawesome": "^3.0.1",
    "less": "^4.1.3",
    "less-loader": "^7.2.1",
    "luxon": "^2.4.0",
    "teahub": "^0.1.0-prerelease11",
    "vue": "^3.2.25",
    "vue-router": "^4.0.13",
    "vuex": "^4.0.2"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^2.3.3",
    "@vue/test-utils": "^2.4.0-alpha.2",
    "eslint": "^8.19.0",
    "eslint-plugin-jsdoc": "^39.3.3",
    "eslint-plugin-vue": "^9.1.1",
    "firebase": "^11.1.0",
    "jsdom": "^25.0.1",
    "less": "^4.1.0",
    "less-loader": "^7.2.1",
    "vite": "^2.9.9",
    "vitest": "^2.1.2"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/essential",
      "eslint:recommended",
      "@vue/standard"
    ],
    "rules": {},
    "overrides": [
      {
        "files": [
          "**/__tests__/*.{j,t}s?(x)",
          "**/tests/unit/**/*.spec.{j,t}s?(x)"
        ],
        "env": {
          "jest": true
        }
      }
    ]
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}
```

vitest.config.js:
```
import {resolve} from "path"
import { defineConfig } from "vitest/config"
import Vue from "@vitejs/plugin-vue"

export default defineConfig({
  plugins: [
    Vue(),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, ".", "src"),
      components: resolve(__dirname, "src/components/"),
      constants: resolve(__dirname, "src/constants/"),
      find: /^~/,
      img: resolve(__dirname, "assets/img"),
      mocks: resolve(__dirname, ".", "tests/__mocks__/"),
      services: resolve(__dirname, "src/services/"),
      src: resolve(__dirname, "src"),
      store: resolve(__dirname, "src/store/"),
      styles: resolve(__dirname, "src/assets/styles/"),
      svgs: resolve(__dirname, "src/assets/svgs/"),
    },
  },

  root: ".", // Define the root
  test: {
    globals: true,
    environment: "jsdom",
    // The file extension of your test files
    include: [
      "tests/**/*.{test,spec}.{js,jsx,ts,tsx}",
    ],
  },
})
```

Assignment
Your assignment is to write adequate unit tests for an app and for `Source File`. 
The app is using vite, vitest, and vue3.
The is app using a front end library (teahub), a vuex store, and the vue router.
Your job is to increase the test coverage of the code in `Source File` with tests written in vitest.
Ensure to use the vitest `mount` instead of `render`.
Ensure a helper function is created at the start of the file to create the `wrapper` using `mount`.
If there are any inherit bugs or issues, report the issues with the code with your response.
